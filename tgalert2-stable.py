import cv2
import requests
import numpy as np
import asyncio
import json
import os
import time
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
from requests.auth import HTTPBasicAuth

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
CONFIG_FILE = "cam_config.json"

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    default_config = {
        "token": "YOUR_BOT_TOKEN",
        "admin_chat_id": "YOUR_CHAT_ID",
        "cameras": {},
        "motion_enabled": True,
        "cooldown": 30,
        "threshold": 30000,
        "check_interval": 5,
        "timeout": 10
    }
    
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r') as f:
                return {**default_config, **json.load(f)}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
    
    return default_config

def save_config(config):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")

class CameraSystem:
    def __init__(self):
        self.config = load_config()
        self.bot = None
        self.prev_frames = {}
        self.camera_status = {}
        self.last_notification = 0

    async def init_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            self.bot = Bot(token=self.config["token"])
            await self.bot.get_me()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            raise

    async def check_cameras_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∫–∞–º–µ—Ä"""
        for cam_id, cam_data in self.config["cameras"].items():
            try:
                response = requests.head(
                    cam_data["url"],
                    timeout=self.config["timeout"],
                    auth=HTTPBasicAuth(cam_data.get("user", ""), cam_data.get("password", ""))
                )
                self.camera_status[cam_id] = (response.status_code == 200)
            except:
                self.camera_status[cam_id] = False

    async def process_camera(self, cam_id, cam_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∫–∞–º–µ—Ä—ã"""
        try:
            response = requests.get(
                cam_data["url"],
                timeout=self.config["timeout"],
                auth=HTTPBasicAuth(cam_data.get("user", ""), cam_data.get("password", ""))
            )
            if response.status_code != 200:
                return None

            frame = cv2.imdecode(np.frombuffer(response.content, np.uint8), cv2.IMREAD_COLOR)
            return frame
        except:
            return None

    async def check_motion(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è"""
        while True:
            await self.check_cameras_status()
            
            if self.config["motion_enabled"]:
                for cam_id, cam_data in self.config["cameras"].items():
                    if self.camera_status.get(cam_id, False):
                        frame = await self.process_camera(cam_id, cam_data)
                        if frame is not None:
                            await self.detect_and_alert(cam_id, frame)
            
            await asyncio.sleep(self.config["check_interval"])

    async def detect_and_alert(self, cam_id, current_frame):
        """–î–µ—Ç–µ–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if cam_id in self.prev_frames:
            motion = self.calculate_motion(self.prev_frames[cam_id], current_frame)
            if motion > self.config["threshold"]:
                await self.send_alert(cam_id, current_frame)

        self.prev_frames[cam_id] = current_frame

    def calculate_motion(self, prev_frame, current_frame):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–≤–∏–∂–µ–Ω–∏—è"""
        gray_prev = cv2.cvtColor(prev_frame, cv2.COLOR_BGR2GRAY)
        gray_current = cv2.cvtColor(current_frame, cv2.COLOR_BGR2GRAY)
        diff = cv2.absdiff(gray_prev, gray_current)
        _, thresh = cv2.threshold(diff, 25, 255, cv2.THRESH_BINARY)
        return np.sum(thresh)

    async def send_alert(self, cam_id, frame):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        current_time = time.time()
        if current_time - self.last_notification < self.config["cooldown"]:
            return

        alert_file = f"alert_{cam_id}.jpg"
        cv2.imwrite(alert_file, frame)
        
        try:
            with open(alert_file, 'rb') as photo:
                await self.bot.send_photo(
                    chat_id=self.config["admin_chat_id"],
                    photo=photo,
                    caption=f"‚ö†Ô∏è –î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä–µ {cam_id}"
                )
            self.last_notification = current_time
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        finally:
            if os.path.exists(alert_file):
                os.remove(alert_file)

    async def get_snapshot(self, cam_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Å –∫–∞–º–µ—Ä—ã"""
        if cam_id not in self.config["cameras"]:
            return None
        return await self.process_camera(cam_id, self.config["cameras"][cam_id])

    async def set_sensitivity(self, threshold):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            threshold = int(threshold)
            if 1000 <= threshold <= 100000:
                self.config["threshold"] = threshold
                save_config(self.config)
                return True
            return False
        except ValueError:
            return False

    async def toggle_motion_detection(self, state):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è"""
        self.config["motion_enabled"] = state
        save_config(self.config)
        return True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if str(update.effective_chat.id) != system.config["admin_chat_id"]:
        return

    commands = [
        "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "/add <name> <url> [user] [password] - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–º–µ—Ä—É",
        "/remove <name> - –£–¥–∞–ª–∏—Ç—å –∫–∞–º–µ—Ä—É",
        "/list - –°–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä —Å —Å—Ç–∞—Ç—É—Å–æ–º",
        "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã",
        "/motion on|off - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é",
        "/sensitivity <value> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ (1000-100000)",
        "/snapshot <name> - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä",
        "/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä"
    ]
    
    await update.message.reply_text("üìπ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–º–µ—Ä\n\n" + "\n".join(commands))

async def list_cameras(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list"""
    if str(update.effective_chat.id) != system.config["admin_chat_id"]:
        return

    if not system.config["cameras"]:
        await update.message.reply_text("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä")
        return

    message = ["–°–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä:"]
    for name, data in system.config["cameras"].items():
        status = "üü¢" if system.camera_status.get(name, False) else "üî¥"
        auth = " (—Ç—Ä–µ–±—É–µ—Ç—Å—è auth)" if data.get("user") else ""
        message.append(f"{status} {name}: {data['url']}{auth}")

    await update.message.reply_text("\n".join(message))

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    if str(update.effective_chat.id) != system.config["admin_chat_id"]:
        return

    online_cams = sum(system.camera_status.values())
    total_cams = len(system.config["cameras"])

    status_text = [
        f"üîπ –î–µ—Ç–µ–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è: {'–í–ö–õ' if system.config['motion_enabled'] else '–í–´–ö–õ'}",
        f"üîπ –ö–∞–º–µ—Ä: {total_cams} ({online_cams} –æ–Ω–ª–∞–π–Ω)",
        f"üîπ –ü–æ—Ä–æ–≥ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {system.config['threshold']}",
        f"üîπ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {system.config['check_interval']} —Å–µ–∫",
        f"üîπ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {system.config['timeout']} —Å–µ–∫",
        f"üîπ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏: {system.config['cooldown']} —Å–µ–∫"
    ]

    await update.message.reply_text("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n\n" + "\n".join(status_text))

async def snapshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /snapshot"""
    if str(update.effective_chat.id) != system.config["admin_chat_id"]:
        return

    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–∞–º–µ—Ä—ã: /snapshot <name>")
        return

    cam_id = context.args[0]
    if cam_id not in system.config["cameras"]:
        await update.message.reply_text(f"–ö–∞–º–µ—Ä–∞ {cam_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    if not system.camera_status.get(cam_id, False):
        await update.message.reply_text(f"–ö–∞–º–µ—Ä–∞ {cam_id} –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ñ—Ñ–ª–∞–π–Ω")
        return

    frame = await system.get_snapshot(cam_id)
    if frame is None:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã")
        return

    snapshot_file = f"snapshot_{cam_id}.jpg"
    cv2.imwrite(snapshot_file, frame)
    
    try:
        with open(snapshot_file, 'rb') as photo:
            await update.message.reply_photo(photo, caption=f"–ö–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã {cam_id}")
    finally:
        if os.path.exists(snapshot_file):
            os.remove(snapshot_file)

async def set_sensitivity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sensitivity"""
    if str(update.effective_chat.id) != system.config["admin_chat_id"]:
        return

    if not context.args:
        current = system.config["threshold"]
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {current}\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /sensitivity <–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1000 –¥–æ 100000>"
        )
        return

    try:
        new_value = int(context.args[0])
        if await system.set_sensitivity(new_value):
            await update.message.reply_text(f"–ü–æ—Ä–æ–≥ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_value}")
        else:
            await update.message.reply_text("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 1000-100000")
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")

async def toggle_motion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /motion"""
    if str(update.effective_chat.id) != system.config["admin_chat_id"]:
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /motion on|off")
        return

    state = context.args[0].lower()
    if state in ["on", "off"]:
        await system.toggle_motion_detection(state == "on")
        await update.message.reply_text(f"–î–µ—Ç–µ–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω–∞' if state == 'on' else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /motion on|off")

async def check_cameras(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check"""
    if str(update.effective_chat.id) != system.config["admin_chat_id"]:
        return

    await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä...")
    await system.check_cameras_status()
    await list_cameras(update, context)

async def add_camera(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add"""
    if str(update.effective_chat.id) != system.config["admin_chat_id"]:
        return

    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <–∏–º—è> <url> [user] [password]")
        return

    cam_name = context.args[0]
    cam_url = context.args[1]
    user = context.args[2] if len(context.args) > 2 else ""
    password = context.args[3] if len(context.args) > 3 else ""

    system.config["cameras"][cam_name] = {
        "url": cam_url,
        "user": user,
        "password": password
    }
    save_config(system.config)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é –∫–∞–º–µ—Ä—É
    is_online = await system.check_camera(cam_name, system.config["cameras"][cam_name])
    system.camera_status[cam_name] = is_online
    
    status = "üü¢" if is_online else "üî¥"
    await update.message.reply_text(f"–ö–∞–º–µ—Ä–∞ {cam_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞! –°—Ç–∞—Ç—É—Å: {status}")

async def remove_camera(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove"""
    if str(update.effective_chat.id) != system.config["admin_chat_id"]:
        return

    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–∞–º–µ—Ä—ã: /remove <name>")
        return

    cam_id = context.args[0]
    if cam_id in system.config["cameras"]:
        del system.config["cameras"][cam_id]
        save_config(system.config)
        if cam_id in system.camera_status:
            del system.camera_status[cam_id]
        await update.message.reply_text(f"–ö–∞–º–µ—Ä–∞ {cam_id} —É–¥–∞–ª–µ–Ω–∞")
    else:
        await update.message.reply_text(f"–ö–∞–º–µ—Ä–∞ {cam_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global system
    system = CameraSystem()
    
    try:
        await system.init_bot()
    except Exception as e:
        print(f"Fail to init bot: {e}")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    app = Application.builder().token(system.config["token"]).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_camera))
    app.add_handler(CommandHandler("remove", remove_camera))
    app.add_handler(CommandHandler("list", list_cameras))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("snapshot", snapshot))
    app.add_handler(CommandHandler("sensitivity", set_sensitivity))
    app.add_handler(CommandHandler("motion", toggle_motion))
    app.add_handler(CommandHandler("check", check_cameras))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–º–µ—Ä –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(system.check_motion())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("Bot started!")
    print(f"ADmin chat ID: {system.config['admin_chat_id']}")
    
    try:
        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        while True:
            await asyncio.sleep(1)
            
    except asyncio.CancelledError:
        pass
    except Exception as e:
        print(f"Err in main loop: {e}")
    finally:
        await app.stop()
        await app.shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"FATL: {e}")